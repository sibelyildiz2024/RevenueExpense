@page "/incomeDebtItems"
@using MauiAppBlazor3.Models
@using MauiAppBlazor3.Services
@inject IInComeDebtItemService InComeDebtItemService
@inject NavigationManager NavigationManager


<div class="grid text-end">
	<div class="g-col-6">
		<a href="/incomedebtsource/2" class="btn btn-primary">Add</a>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
		<h3>Categories</h3>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
		<div class="input-group mb-3">
			<select class="form-select" id="incomeDebtSourchList" @onchange="SetSelectedItem">
				<option value="0" selected>Chose...</option>
				<option value="1">Revenue</option>
				<option value="2">Expense</option>
			</select>
			<button type="button" class="btn btn-link" @onclick="SearchDataAll">
				Search
			</button>
		</div>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
			<div class="table-responsive">
		<table class="table table table-striped">
			<thead>
				<tr>
					<th>Category</th>
					<th>Revenue</th>
					<th>Expense</th>
					<th></th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in itemModel)
				{
					<tr>
						<td>@item.Name</td>
						<td><InputCheckbox class="form-check-input" @bind-Value="item.IsIncome" disabled></InputCheckbox></td>
						<td><InputCheckbox class="form-check-input" @bind-Value="item.IsDebt" disabled></InputCheckbox></td>
						<td>
							<a class="btn btn-link" href="/incomedebtsourceedit/@item.Id">
								<Icon Name="IconName.PencilSquare" Color="IconColor.Success" />
							</a>
						</td>
						<td>
							<button type="button" class="btn btn-link" @onclick="()=>DeleteItem(item.Id)">
								<Icon Name="IconName.Trash3" Color="IconColor.Danger" />
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
		</div>
	</div>
</div>

@code {
	private List<IncomeDebtItemModel> itemModel = new();
	private int selectedItem = 0;

	protected override async Task OnInitializedAsync()
	{
		itemModel = await InComeDebtItemService.GetAll();
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(itemModel);
	}

	private void NavigateEditPage(int id)
	{
		var indInfo = id;
	}

	private async Task DeleteItem(int id)
	{
		var answer = await App.Current.MainPage.DisplayAlert(
		"Alert",
		"Are you sure you want to delete it?",
		"Yes",
		"No");

		if (answer)
		{
			var model = await InComeDebtItemService.GetWithChildByIdAsync(id);

			if (model != null)
			{
				if (model.Incomes?.Count > 0)
				{
					await App.Current.MainPage.DisplayAlert(
					"Alert",
					"You cannot delete this category record. There are Revenue records related to this category record.",
					"Ok");
				}
				else if (model.Debts?.Count > 0)
				{
					await App.Current.MainPage.DisplayAlert(
					"Alert",
					"You cannot delete this category record. There are Expense records related to this category record.",
					"Ok");
				}
				else
				{
					var effectedrow = await InComeDebtItemService.Delete(model);

					if (effectedrow == 1)
					{
						itemModel = await InComeDebtItemService.GetAll();
					}
					else
					{
						await App.Current.MainPage.DisplayAlert(
							"Alert",
							"An error has occurred. Please contact the system administrator",
							"Ok");
					}
				}
			}
		}
	}

	private async Task SearchDataAll()
	{
		switch (selectedItem)
		{
			case 0:
				itemModel = await InComeDebtItemService.GetAll();
				break;
			case 1://Gelir(Alacak) kayıtları
				itemModel = await InComeDebtItemService.GetAllIncomeSourceAsync();
				break;
			case 2://Gider(Borç) kayıtları
				itemModel = await InComeDebtItemService.GetAllDebtSourceAsync();
				break;
		}
	}

	private void SetSelectedItem(ChangeEventArgs e)
	{
		if (e.Value != null)
		{
			selectedItem = Convert.ToInt32(e.Value);
		}
	}
}
