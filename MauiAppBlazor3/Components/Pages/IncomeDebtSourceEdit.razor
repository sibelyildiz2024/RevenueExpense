@page "/incomedebtsourceedit/{Id:int}"
@using MauiAppBlazor3.Models
@using MauiAppBlazor3.Services
@inject IInComeDebtItemService InComeDebtItemService
@inject NavigationManager NavigationManager

<div class="row mb-3">
	<div class="col-sm-10">
		<h3>Update Category</h3>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
		<input name="incomeSourceName" @bind-value="model.Name" placeholder="Kategori İsmi giriniz" type="text" class="form-control" />

	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
		<div class="form-check">
			<input class="form-check-input" type="checkbox" value="" id="checkIncome" @bind="model.IsIncome">
			<label class="form-check-label" for="checkIncome">
				Revenue
			</label>
		</div>
		<div class="form-check">
			<input class="form-check-input" type="checkbox" value="" id="checkDebt" @bind="model.IsDebt">
			<label class="form-check-label" for="checkDebt">
				Expense
			</label>
		</div>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
		<button class="btn btn-outline-success" type="button" @onclick="SaveData">Update</button>
		<a class="btn btn-outline-primary" href="/incomeDebtItems">
			Cancel
		</a>
	</div>
</div>
<div class="row mb-3">
	<div class="col-sm-10">
		<p style="color:red">
			@ValidationErrorMessage1
		</p>
		<p style="color:red">
			@ValidationErrorMessage2
		</p>
	</div>
</div>
@code {
	[Parameter]
	public int Id { get; set; }
	private string? ValidationErrorMessage1;
	private string? ValidationErrorMessage2;
	bool isValidate = true;

	private IncomeDebtItemModel model = new();

	protected override async Task OnInitializedAsync()
	{
		model = await InComeDebtItemService.GetById(Id);
	}

	private async Task SaveData()
	{
		await Validate();

		if (isValidate)
		{
			int savedData = await InComeDebtItemService.Update(model);
			if (savedData == 1)
			{
				NavigationManager.NavigateTo("/incomeDebtItems");
			}
			else
			{
				await App.Current.MainPage.DisplayAlert(
					"Alert",
					"An error has occurred. Please contact the system administrator",
					"Ok");
			}
		}
	}

	private async Task Validate()
	{
		ValidationErrorMessage1 = string.Empty;
		ValidationErrorMessage2 = string.Empty;
		isValidate = true;

		if (string.IsNullOrEmpty(model.Name))
		{
			ValidationErrorMessage1 = "*Please enter category name";
			isValidate = false;
		}
		else
		{
			var alreadyTakenName = await InComeDebtItemService.GetByName(model.Name);
			if (alreadyTakenName != null && alreadyTakenName.Id != model.Id)
			{
				ValidationErrorMessage1 = "*This category name had been used before";
				isValidate = false;
			}
		}

		if (!model.IsIncome && !model.IsDebt)
		{
			ValidationErrorMessage2 = "*You must select at least one of the Income or Expense sections.";
			isValidate = false;
		}
	}
}
